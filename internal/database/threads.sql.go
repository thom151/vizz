// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: threads.sql

package database

import (
	"context"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (created_at, updated_at, thread_id, user_id, book_id)
VALUES (
   CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    ?,
    ?,
    ?
    )
RETURNING id, created_at, updated_at, thread_id, user_id, book_id
`

type CreateThreadParams struct {
	ThreadID string
	UserID   string
	BookID   int64
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread, arg.ThreadID, arg.UserID, arg.BookID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThreadID,
		&i.UserID,
		&i.BookID,
	)
	return i, err
}

const getThread = `-- name: GetThread :one
SELECT id, created_at, updated_at, thread_id, user_id, book_id FROM threads WHERE user_id = ? AND book_id = ?
`

type GetThreadParams struct {
	UserID string
	BookID int64
}

func (q *Queries) GetThread(ctx context.Context, arg GetThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, arg.UserID, arg.BookID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThreadID,
		&i.UserID,
		&i.BookID,
	)
	return i, err
}
