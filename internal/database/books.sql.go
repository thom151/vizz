// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
)

const createBookEntry = `-- name: CreateBookEntry :one
INSERT INTO books (title, author, description, epub_path, created_at, updated_at)
VALUES (
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
    )
RETURNING id, title, author, description, epub_path, created_at, updated_at
`

type CreateBookEntryParams struct {
	Title       string
	Author      sql.NullString
	Description sql.NullString
	EpubPath    string
}

func (q *Queries) CreateBookEntry(ctx context.Context, arg CreateBookEntryParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBookEntry,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.EpubPath,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.EpubPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, description, epub_path, created_at, updated_at FROM books WHERE id=?
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.EpubPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, description, epub_path, created_at, updated_at FROM books WHERE title LIKE '%' || ?1 || '%'
`

func (q *Queries) GetBooks(ctx context.Context, book sql.NullString) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks, book)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.EpubPath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
